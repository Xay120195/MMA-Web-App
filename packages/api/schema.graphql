# Objects
type Address {
  id: ID!
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zipCode: Int
  country: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Background {
  id: ID
  date: AWSDateTime
  description: String
  order: Int
  files(limit: Int, nextToken: String): BackgroundFileConn
  briefs(limit: Int, nextToken: String, isDeleted: Boolean): BackgroundBriefConn
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Brief {
  id: ID!
  name: String
  date: String
  order: Int
  backgrounds(limit: Int, nextToken: String, sortOrder: OrderBy): BriefBackgroundConn
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  labelId: ID # not null if brief is created through label
}

type Client {
  id: ID!
  name: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClientMatter {
  id: ID!
  matter: Matter
  client: Client
  backgrounds(limit: Int, nextToken: String, sortOrder: OrderBy): ClientMatterBackgroundConn
  labels(limit: Int, nextToken: String): ClientMatterLabelConn
  rfis(limit: Int, nextToken: String, isDeleted: Boolean): ClientMatterRFIConn
  briefs(limit: Int, nextToken: String, isDeleted: Boolean): ClientMatterBriefConn
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ColumnSettings {
  id: ID!
  name: String
  label: String
  tableName: ViewTable
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Company {
  id: ID!
  name: String
  address: Address
  users(limit: Int, nextToken: String): CompanyUserConn
  clients(limit: Int, nextToken: String): CompanyClientConn
  matters(limit: Int, nextToken: String): CompanyMatterConn
  customUserTypes(limit: Int, nextToken: String): CompanyCustomUserTypeConn
  teams(limit: Int, nextToken: String): CompanyTeamConn
  clientMatters(limit: Int, nextToken: String, sortOrder: OrderBy): CompanyClientMatterConn
  gmailMessages(
    limit: Int
    nextToken: String
    sortOrder: OrderBy
    isDeleted: Boolean
    isSaved: Boolean
    email: String
    subject: String
    recipient: String
    startDate: String
    endDate: String
    userTimeZone: String
  ): CompanyGmailMessagesConn
  gmailToken: GmailToken
  phone: String
  email: AWSEmail
  representative: User
  logo: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type CompanyAccessType {
  id: ID
  companyId: ID
  userType: UserType
  customUserType: CustomUserType
  access: [Page]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Feature {
  id: ID!
  name: String
  label: String
  page: Page
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type File {
  id: ID
  name: String
  size: Int
  type: String
  details: String
  s3ObjectKey: String
  order: Int
  date: AWSDateTime
  labels(limit: Int, nextToken: String): FileLabelConn
  backgrounds(limit: Int, nextToken: String): FileBackgroundConn
  downloadURL: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  isDeleted: Boolean
  isGmailAttachment: Boolean
  isGmailPDF: Boolean
  gmailMessageId: String
  nextToken: String
}

type FileLabel {
  id: ID
  file: File
  label: Label
}

type Label {
  id: ID!
  name: String
  description: String
  files(limit: Int, nextToken: String): LabelFileConn
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Matter {
  id: ID!
  name: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Page {
  id: ID!
  name: String
  label: String
  route: String
  features: [Feature]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Request {
  id: ID!
  question: String
  answer: String
  order: Int
  itemNo: String
  subRequest: [Request]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type RFI {
  id: ID!
  name: String
  description: String
  order: Int
  requests(limit: Int, nextToken: String): RFIRequestsConn
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  contactNumber: String
  company: Company
  userType: UserType
  customUserType: CustomUserType
  profilePicture: String
  organisations: UserCompanyConn
  clientMatterAccess(companyId: ID, limit: Int, nextToken: String): UserClientMatterAccessConn
  teams(limit: Int, nextToken: String): UserTeamConn
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type CustomUserType {
  id: ID!
  name: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type UserColumnSettings {
  id: ID
  userId: ID
  columnSettings: ColumnSettings
  isVisible: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type UserClientMatterAccess {
  id: ID
  user: User
  company: Company
  clientMatter: ClientMatter
  userType: UserType
  customUserType: CustomUserType
}

type GmailMessage {
  id: String
  threadId: String
  connectedEmail: String
  gmailMessageId: String
  contentType: String
  date: String
  internalDate: String
  receivedAt: String
  from: String
  to: String
  recipient: String
  description: String
  cc: String
  bcc: String
  historyId: String
  subject: String
  lowerSubject: String
  snippet: String
  lowerSnippet: String
  labelIds: [String]
  payload: [GmailPayload]
  updatedAt: AWSDateTime
  clientMatters(limit: Int, nextToken: String): GmailMessageClientMattersConn
  labels(limit: Int, nextToken: String): GmailMessagLabelsConn
  attachments: GmailMessageAttachmentConn
}

type GmailPayload {
  id: String
  messageId: String
  content: String
  order: Int
}

type GmailToken {
  id: String
  refreshToken: String
  userId: ID
  companyId: ID
  userTimeZone: String
  updatedAt: AWSDateTime
}

type GmailMessageAttachment {
  id: String
  s3ObjectKey: String
  messageId: String
  size: Int
  type: String
  name: String
  details: String
  order: Int
  labels: GmailAttachmentLabelConn
  downloadURL: String
  updatedAt: AWSDateTime
  isDeleted: Boolean
}

type Team {
  id: ID!
  teamPicture: String
  name: String!
  description: String
  members: TeamMemberConn
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Member {
  id: ID!
  user: User!
  userType: UserType
  customUserType: CustomUserType
}

# enum
enum OrderBy {
  CREATED_DESC
  CREATED_ASC
  ORDER_DESC
  ORDER_ASC
  DATE_DESC
  DATE_ASC
}

enum UserType {
  OWNER
  LEGALADMIN
  BARRISTER
  EXPERT
  CLIENT
  WITNESS
}

enum ViewTable {
  FILEBUCKET
  BACKGROUNDS
}

# Inputs
input AccessInput {
  id: ID!
  name: String
  features: [FeatureInput]
}

input ArrangementInput {
  id: ID
  order: Int
}

input BackgroundInput {
  id: ID
  date: AWSDateTime
  description: String
  order: Int
}

input ClientInput {
  id: ID
  name: String
}

input ClientMatterInput {
  id: ID
}

input ColumnSettingsInput {
  id: ID
  tableName: ViewTable
}

input CompanyInput {
  id: ID!
  name: String
}

input FeatureInput {
  id: ID!
  name: String
  label: String
}

input FileInput {
  id: ID
  name: String
}

input LabelInput {
  id: ID
  name: String
  description: String
}

input MatterFileInput {
  matterId: ID
  s3ObjectKey: String
  size: Int
  type: String
  name: String
  details: String
  order: Int
  date: AWSDateTime
}

input MatterInput {
  id: ID
  name: String
}

input PageInput {
  id: ID!
  name: String
}

input RepresentativeInput {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
}

input CustomUserTypeInput {
  id: ID!
  name: String
}

input MemberInput {
  userId: ID
  userType: UserType
  customUserType: CustomUserTypeInput
}

input UserClientMatterAccessInput {
  clientMatterId: ID
  userType: UserType
  customUserType: CustomUserTypeInput
}

# Relationships / Conns
type BackgroundFileConn {
  items: [File]
  nextToken: String
}

type BackgroundBriefConn {
  items: [Brief]
  nextToken: String
}

type BriefBackgroundConn {
  items: [Background]
  nextToken: String
}

type ClientMatterBackgroundConn {
  items: [Background]
  nextToken: String
}

type ClientMatterBriefConn {
  items: [Brief]
  nextToken: String
}

type ClientMatterLabelConn {
  items: [Label]
  nextToken: String
}

type ClientMatterRFIConn {
  items: [RFI]
  nextToken: String
}

type CompanyClientConn {
  items: [Client]
  nextToken: String
}

type CompanyClientMatterConn {
  items: [ClientMatter]
  nextToken: String
}

type CompanyMatterConn {
  items: [Matter]
  nextToken: String
}

type CompanyUserConn {
  items: [User]
  nextToken: String
}

type CompanyCustomUserTypeConn {
  items: [CustomUserType]
  nextToken: String
}

type CompanyTeamConn {
  items: [Team]
  nextToken: String
}

type UserCompanyConn {
  items: [Company]
  nextToken: String
}

type UserTeamConn {
  items: [Team]
  nextToken: String
}

type FileLabelConn {
  items: [Label]
  nextToken: String
}

type FileBackgroundConn {
  items: [Background]
  nextToken: String
}
type LabelFileConn {
  items: [File]
  nextToken: String
}

type MatterFileConn {
  items: [File]
  nextToken: String
}

type RFIRequestsConn {
  items: [Request]
  nextToken: String
}

type UserClientMatterAccessConn {
  items: [UserClientMatterAccess]
  nextToken: String
}

type CompanyGmailMessagesConn {
  items: [GmailMessage]
  nextToken: String
}
type GmailMessageClientMattersConn {
  items: [ClientMatter]
  nextToken: String
}

type GmailMessagLabelsConn {
  items: [Label]
  nextToken: String
}

type GmailMessageAttachmentConn {
  items: [GmailMessageAttachment]
}

type GmailAttachmentLabelConn {
  items: [Label]
  nextToken: String
}

type TeamMemberConn {
  items: [Member]
  nextToken: String
}

type Query {
  background(id: ID): Background
  backgrounds: [Background]
  brief(id: ID): Brief
  briefByName(clientMatterId: ID, name: String): Brief
  briefs: [Brief]
  client(id: ID): Client
  clientMatter(id: ID): ClientMatter
  clientMatters: [ClientMatter]
  clients: [Client]
  columnSettings(tableName: ViewTable): [ColumnSettings]
  companies: [Company]
  company(id: String): Company
  companyAccessType(
    companyId: String
    userType: UserType
    customUserType: CustomUserTypeInput
  ): [CompanyAccessType]
  feature(id: String): Feature
  features: [Feature]
  file(id: ID): File
  files: [File]
  label(id: ID): Label
  labels: [Label]
  matter(id: ID): Matter
  matterFiles(
    matterId: ID
    isDeleted: Boolean
    limit: Int
    nextToken: String
    sortOrder: OrderBy
  ): MatterFileConn
  matters: [Matter]
  multipleLabels(id: [ID]): [Label]
  page(id: ID): Page
  pages: [Page]
  rfi(id: ID): RFI
  rfis: [RFI]
  request(id: ID): Request
  requests: [Request]
  user(id: String): User
  userColumnSettings(userId: ID, tableName: ViewTable): [UserColumnSettings]
  users: [User]
  customUserTypes: [CustomUserType]
  customUserType(id: ID): CustomUserType
  gmailMessage(id: ID): GmailMessage
  gmailMessages(
    email: String
    subject: String
    recipient: String
    startDate: String
    endDate: String
  ): [GmailMessage]
  gmailAttachment(id: String): GmailMessageAttachment
  teams: [Team]
  team(id: ID): Team
  defaultUserType: [UserType]
}

type Mutation {
  backgroundBulkDelete(id: [ID]): [Background]
  backgroundBulkUpdateOrders(arrangement: [ArrangementInput]): [Background]
  backgroundCreate(description: String, date: AWSDateTime, briefId: ID, order: Int): Background
  backgroundBulkCreate(briefId: String, backgrounds: [BackgroundInput]): [Background]
  backgroundDelete(id: ID): Background
  backgroundFileTag(backgroundId: ID, files: [FileInput]): Background
  backgroundUpdate(id: ID, date: AWSDateTime, description: String, order: Int): Background
  briefBackgroundTag(briefId: ID, background: [BackgroundInput]): [Brief]
  briefCreate(
    name: String
    date: AWSDateTime
    clientMatterId: String
    order: Int
    labelId: ID
  ): Brief
  briefBackgroundUntag(briefId: ID, background: [BackgroundInput]): Brief
  briefDelete(id: ID): Brief
  briefSoftDelete(id: ID): Brief
  briefUpdate(id: ID, name: String, date: AWSDateTime, order: Int, labelId: ID): Brief
  clientCreate(name: String, companyId: String): Client
  clientMatterCreate(
    companyId: String
    userId: ID
    client: ClientInput
    matter: MatterInput
  ): ClientMatter
  clientMatterDelete(id: ID): ClientMatter
  columnSettingsCreate(name: String, label: String, tableName: ViewTable!): ColumnSettings
  companyAccessTypeCreate(
    companyId: String
    userType: [UserType]
    customUserType: CustomUserTypeInput
    access: [AccessInput]
  ): [CompanyAccessType]
  companyAccessTypeUpdate(
    id: String
    userType: UserType
    customUserType: CustomUserTypeInput
    access: [AccessInput]
  ): CompanyAccessType
  companyCreate(name: String, representative: RepresentativeInput): Company
  featureCreate(name: String, label: String, page: PageInput): Feature
  fileLabelTag(file: FileInput, label: [LabelInput]): FileLabel
  labelCreate(name: String, clientMatterId: String): Label
  labelBulkCreate(clientMatterId: String, labels: [LabelInput]): [Label]
  labelUpdate(id: ID, name: String, description: String): Label
  matterCreate(name: String, companyId: String): Matter
  matterFileBulkCreate(files: [MatterFileInput]): [File]
  matterFileBulkUpdateOrders(arrangement: [ArrangementInput]): [File]
  matterFileCreate(
    matterId: ID
    s3ObjectKey: String
    size: Int
    type: String
    name: String
    details: String
    order: Int
    isGmailAttachment: Boolean
    isGmailPDF: Boolean
    gmailMessageId: String
    date: AWSDateTime
    labels: [LabelInput]
  ): File

  matterFileSoftDelete(id: ID): File
  matterFileBulkSoftDelete(id: [ID]): [File]
  matterFileUpdate(
    id: ID
    name: String
    details: String
    order: Int
    date: AWSDateTime
    labels: [LabelInput]
  ): File
  pageCreate(name: String, label: String, route: String, features: [FeatureInput]): Page
  rfiCreate(name: String, clientMatterId: String): RFI
  rfiUpdate(id: ID, name: String, description: String, order: Int): RFI
  rfiDelete(id: ID): RFI
  rfiSoftDelete(id: ID): RFI
  requestCreate(question: String, answer: String, itemNo: String, order: Int, rfiId: ID): Request
  requestUpdate(id: ID, question: String, answer: String, itemNo: String, order: Int): Request
  requestDelete(id: ID): Request
  userColumnSettingsCreate(userId: ID, columnSettings: [ColumnSettingsInput]): UserColumnSettings
  userColumnSettingsUpdate(id: ID, isVisible: Boolean): UserColumnSettings
  userCreate(
    id: ID!
    firstName: String
    lastName: String
    email: AWSEmail
    userType: UserType
    customUserType: CustomUserTypeInput
    company: CompanyInput
  ): User
  userInvite(
    firstName: String
    lastName: String
    email: AWSEmail
    userType: UserType
    customUserType: CustomUserTypeInput
    company: CompanyInput
  ): User
  userDelete(id: ID, companyId: ID, email: AWSEmail): User
  userUpdate(
    id: ID!
    firstName: String
    lastName: String
    email: AWSEmail!
    contactNumber: String
    company: CompanyInput
    userType: UserType
    customUserType: CustomUserTypeInput
    profilePicture: String
  ): User
  userClientMatterTag(
    userId: ID
    companyId: ID
    clientMatterAccess: [UserClientMatterAccessInput]
  ): [UserClientMatterAccess]
  # userClientMatterTagAll(
  #   userId: ID
  #   userType: UserType
  #   customUserType: CustomUserTypeInput
  # ): [UserClientMatterAccess]
  userClientMatterUntag(userId: ID, companyId: ID): UserClientMatterAccess
  gmailMessageCreate(
    companyId: ID
    messageId: String
    from: String
    to: String
    subject: String
    snippet: String
    connectedEmail: String
    receivedAt: String
  ): GmailMessage
  gmailMessageClientMatterTag(gmailMessageId: String, clientMatterId: ID): GmailMessage
  gmailMessageClientMatterUntag(gmailMessageId: String): GmailMessage
  gmailMessageLabelTag(gmailMessageId: String, labelId: [ID]): GmailMessage
  gmailMessageLabelUntag(gmailMessageId: String): GmailMessage
  gmailAttachmentLabelTag(attachmentId: String, labelId: [ID]): GmailMessageAttachment
  gmailAttachmentLabelUntag(attachmentId: String): GmailMessageAttachment
  gmailMessageSave(id: ID, companyId: ID, isSaved: Boolean): GmailMessage
  gmailMessageSoftDelete(id: ID, companyId: ID): GmailMessage
  gmailMessageBulkSoftDelete(id: [ID], companyId: ID): [GmailMessage]
  gmailConnectFromCode(
    email: String
    code: String
    userId: ID
    companyId: ID
    userTimeZone: String
  ): GmailToken
  gmailDisconnect(email: String): GmailToken
  gmailMessageAttachmentCreate(
    messageId: String
    s3ObjectKey: String
    size: Int
    type: String
    name: String
    details: String
    order: Int
  ): GmailMessageAttachment
  gmailMessageDescriptionUpdate(id: String, description: String): GmailMessage
  gmailMessageAttachmentUpdate(id: ID, details: String, isDeleted: Boolean): GmailMessageAttachment
  customUserTypeCreate(name: String, companyId: ID): CustomUserType
  customUserTypeUpdate(id: ID, name: String): CustomUserType
  customUserTypeDelete(id: ID): CustomUserType
  teamCreate(companyId: ID, name: String): Team
  teamUpdate(id: ID, name: String): Team
  teamDelete(id: ID): Team
  teamMemberTag(teamId: ID, members: [MemberInput]): Team
}

schema {
  query: Query
  mutation: Mutation
}
