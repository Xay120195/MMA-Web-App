type Color {
  id: ID!
  name: String
  hex: String
}

type Address {
  id: ID!
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zipCode: Int
  country: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Company {
  id: ID!
  name: String
  address: Address
  users: CompanyUserConnection
  clients: CompanyClientConnection
  matters: CompanyMatterConnection
  clientMatters: CompanyClientMatterConnection
  phone: String
  email: AWSEmail
  representative: User
  logo: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type CompanyUserConnection {
  items: [User]
  # nextToken: String
}

type CompanyClientConnection {
  items: [Client]
  # nextToken: String
}

type CompanyMatterConnection {
  items: [Matter]
  # nextToken: String
}

type CompanyClientMatterConnection {
  items: [ClientMatter]
  # nextToken: String
}

type CompanyAccessType {
  id: ID
  companyId: ID
  userType: UserType
  access: [Page]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  contactNumber: String
  company: Company
  userType: UserType
  profilePicture: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Page {
  id: ID!
  name: String
  label: String
  route: String
  features: [Feature]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Feature {
  id: ID!
  name: String
  label: String
  page: Page
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum UserType {
  OWNER
  LEGALADMIN
  BARRISTER
  EXPERT
  CLIENT
  WITNESS
}

type File {
  id: ID
  name: String
  size: Int
  type: String
  details: String
  labels: [Label]
  downloadURL: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type FileLabel {
  id: ID
  file: File
  label: Label
}

type Client {
  id: ID!
  name: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Matter {
  id: ID!
  name: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Label {
  id: ID!
  name: String
  description: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClientMatter {
  id: ID!
  matter: Matter
  client: Client
  backgrounds: ClientMatterBackgroundConnection
  labels: ClientMatterLabelConnection
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClientMatterBackgroundConnection {
  items: [Background]
  # nextToken: String
}

type ClientMatterLabelConnection {
  items: [Label]
  # nextToken: String
}

type Background {
  id: ID
  date: String
  description: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  colors: [Color]
  companies: [Company]
  company(id: String): Company
  companyAccessType(companyId: String, userType: UserType): [CompanyAccessType]
  user(id: String): User
  page: [Page]
  feature(id: String): Feature
  clients: [Client]
  client(id: ID): Client
  clientMatters: [ClientMatter]
  clientMatter(id: ID): ClientMatter
  matters: [Matter]
  matter(id: ID): Matter
  matterFile(matterId: ID): [File]
  labels: [Label]
  label(id: ID): Label
  backgrounds: [Background]
  background(id: ID): Background
}

type Mutation {
  addColor(name: String!, hex: String!): Color
  companyCreate(name: String, representative: RepresentativeInput): Company
  companyAccessTypeCreate(
    companyId: String
    userType: UserType
    access: [AccessInput]
  ): CompanyAccessType
  userCreate(
    id: ID!
    firstName: String
    lastName: String
    email: AWSEmail
    userType: UserType
    company: CompanyInput
  ): User
  userInvite(
    firstName: String
    lastName: String
    email: AWSEmail
    userType: UserType
    company: CompanyInput
  ): User
  pageCreate(
    name: String
    label: String
    route: String
    features: [FeatureInput]
  ): Page
  featureCreate(name: String, label: String, page: PageInput): Feature
  clientCreate(name: String, companyId: String): Client
  matterCreate(name: String, companyId: String): Matter
  matterFileCreate(
    matterId: ID
    s3ObjectKey: String
    size: Int
    type: String
    name: String
    details: String
  ): File
  matterFileUpdate(
    id: ID
    name: String
    details: String
    labels: [LabelInput]
  ): File
  companyAccessTypeUpdate(id: String, access: [AccessInput]): CompanyAccessType
  clientMatterCreate(
    companyId: String
    client: ClientInput
    matter: MatterInput
  ): ClientMatter
  labelCreate(name: String, clientMatterId: String): Label
  labelUpdate(id: ID, name: String, description: String): Label
  fileLabelCreate(file: FileInput, label: LabelInput): FileLabel
  fileLabelDelete(file: FileInput, label: LabelInput): FileLabel
  backgroundCreate(date: String, clientMatterId: String): Background
  backgroundUpdate(id: ID, date: String, description: String): Background
  backgroundDelete(id: ID): Background
}

input ClientMatterInput {
  id: ID
}

input MatterInput {
  id: ID
  name: String
}

input FileInput {
  id: ID
  name: String
}

input ClientInput {
  id: ID
  name: String
}

input LabelInput {
  id: ID
  name: String
  description: String
}

input AccessInput {
  id: ID!
  name: String
  features: [FeatureInput]
}

input FeatureInput {
  id: ID!
  name: String
  label: String
}

input CompanyInput {
  id: ID!
  name: String
}

input PageInput {
  id: ID!
  name: String
}

input RepresentativeInput {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
}
