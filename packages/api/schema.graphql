type Color {
  id: ID!
  name: String
  hex: String
}

type Address {
  id: ID!
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zipCode: Int
  country: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Company {
  id: ID!
  name: String
  address: Address
  phone: String
  email: AWSEmail
  representative: User
  logo: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type CompanyAccessType {
  id: ID
  companyId: ID
  userType: UserType
  access: [Page]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  contactNumber: String
  company: Company
  userType: UserType
  profilePicture: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Page {
  id: ID!
  name: String
  label: String
  route: String
  features: [Feature]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Feature {
  id: ID!
  name: String
  label: String
  page: Page
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum UserType {
  OWNER
  LEGALADMIN
  BARRISTER
  EXPERT
  CLIENT
  WITNESS
}

type File {
  id: ID
  name: String
  size: Int
  type: String
  downloadURL: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Client {
  id: ID!
  name: String
  companyId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Matter {
  id: ID!
  name: String
  companyId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ClientMatter {
  id: ID
  matter: Matter
  client: Client
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Background {
  id: ID
  date: AWSDateTime
  description: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  colors: [Color]
  company(id: String): Company
  companyAccessType(companyId: String, userType: UserType): [CompanyAccessType]
  user(id: String): User
  page: [Page]
  feature(id: String): Feature
  matterFile(matterId: ID): [File]
  client(companyId: ID): [Client]
  matter(companyId: ID): [Matter]
  clientMatter(id: ID!): [ClientMatter]
  background(companyId: ID): [Background]
}

type Mutation {
  addColor(name: String!, hex: String!): Color
  companyCreate(name: String, representative: RepresentativeInput): Company
  companyAccessTypeCreate(
    companyId: String
    userType: UserType
    access: [AccessInput]
  ): CompanyAccessType
  userCreate(
    id: ID!
    firstName: String
    lastName: String
    email: AWSEmail
    userType: UserType
    company: CompanyInput
  ): User
  userInvite(
    firstName: String
    lastName: String
    email: AWSEmail
    userType: UserType
    company: CompanyInput
  ): User
  pageCreate(
    name: String
    label: String
    route: String
    features: [FeatureInput]
  ): Page
  featureCreate(name: String, label: String, page: PageInput): Feature
  clientCreate(
    name: String
    companyId: ID
  ): Client
  matterCreate(
    name: String
    companyId: ID
  ): Matter
  matterFileCreate(matterId: ID, s3ObjectKey: String, size: Int, type: String, name: String): File
  companyAccessTypeUpdate(
    id: String
    access: [AccessInput]
  ): CompanyAccessType
  clientMatterUpdate(
    id: ID
    matter: [MatterInput]
  ): Client
  clientMatterCreate(
    matter: [MatterInput]
    client: [ClientInput]
  ): ClientMatter
  backgroundCreate(
    companyId: ID
  ): Background
  backgroundUpdate(
    id: ID
    description: String
  ): Background
}

input MatterInput {
  id: ID
}

input ClientInput {
  id: ID
}

input AccessInput {
  id: ID!
  name: String
  features: [FeatureInput]
}

input FeatureInput {
  id: ID!
  name: String
  label: String
}

input CompanyInput {
  id: ID!
  name: String
}

input PageInput {
  id: ID!
  name: String
}

input RepresentativeInput {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
}
